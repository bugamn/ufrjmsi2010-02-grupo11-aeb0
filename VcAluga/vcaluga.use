--aggregation
--association
--composition
--associationclass

model VoceAluga

--Classes

class opcao
attributes
	grupo : grupo_carro
end

class agencia
attributes
  localizacao : String
end

class dataHora
attributes
	value : Integer
	agora : dataHora
operations
	toMinute() : Integer = value
	toHour() : Integer = (value / 60).floor()
	toDay() : Integer = (value / 1440).floor()
end

class gerente
end

class agente_de_locacao
end

class grupo_carro
attributes
	categoria : String
operations
	grupo(nome : String) : grupo_carro = grupo_carro.allInstances()->select(g:grupo_carro | nome = g.categoria)->asSequence()->first()
	
constraints
	inv mesmoNome : grupo_carro.allInstances()->select(g: grupo_carro | g.categoria = categoria and g <> self)->isEmpty() 
end

class modelo
attributes
  marca : String
  especificacoes : String
end

class carro
attributes
	placa : String
	ano : String
	quilometragem : Real
	preparado : Boolean
	verificado : Boolean
	condicao : String
	quilometragemRevisado : Real
	dataRevisado : dataHora
constraints
	inv manutencao: quilometragem - quilometragemRevisado < 10000 or self.manutencao.data.agora.toDay() - self.manutencao.data.toDay() < 3*30 or (quilometragem - quilometragemRevisado < 10000*1.1 or self.manutencao.data.agora.toDay() - self.manutencao.data.toDay() < 3*30*1.1 and reserva.allInstances->select(r | r.dataHora_reserva = r.dataHora_reserva.agora)->size() > carro.allInstances->select(c | c.quilometragem - c.quilometragemRevisado < 10000 or c.manutencao.data.agora.toDay() - c.manutencao.data.toDay() < 3*30 and c.condicao = 'normal' and c.locacao.isUndefined())->size())

end

class cliente
attributes
	nome : String
	cpf : String
	endereco : String
	idade : Integer
	cartao : CC
	condicao : String
	apto : Boolean
constraints
	inv HabilitacaoValida: self.carteira.validade.toMinute() > self.locacao.dataHora_devolucao.toMinute() or self.locacao->isEmpty()
	inv SeguroCompativel: self.pais.regra->includesAll(self.seguro.regra)
	inv CarroAmbiental: self.pais->collect(regra)->includesAll(self.carro.regra) or self.carro->isEmpty()
end

class regra
end

class apolice_seguro
end

class carteira_habilitacao
attributes
	emissao : dataHora
	validade : dataHora
end

class imposto
attributes
	valor : Real
end

class pais
attributes
  nome : String
end

class estacao_de_servico
end

class registro
attributes
	problemas_pagamento : String
	acidentes : String
	danos : String
operations
	listaNegra() : Boolean = 
		not(problemas_pagamento.isUndefined() and acidentes.isUndefined() and danos.isUndefined)
end

class pagamento
attributes

  forma : String
  valor : Real
  recebido : Boolean
  vencimento : String
constraints
	inv tipo: forma = 'dinheiro' or forma = 'CC'
end

--Relacoes

associationclass reserva between
	cliente[1] role requerente
	agencia[1] role reservador
attributes
	dataHora_reserva : dataHora
	dataHora_devolucao : dataHora
operations
	criarReserva(c : cliente, a : agencia, g : grupo_carro, data1 : dataHora, data2 : dataHora) : reserva
	pre capacidade: a.reserva->size() <= a.carro->size()
	pre clienteLimpo: not(c.registro.listaNegra())
	pre dataSobreposta: reserva.allInstances()->select(r : reserva | (r.dataHora_reserva.toDay() > data1.toDay() and r.dataHora_reserva.toDay() < data2.toDay()) or (r.dataHora_devolucao.toDay() > data1.toDay() and r.dataHora_devolucao.toDay() < data2.toDay()) and (data1.toDay() > r.dataHora_reserva.toDay() and data1.toDay() < r.dataHora_devolucao.toDay()) or (data2.toDay() > r.dataHora_reserva.toDay() and data2.toDay() < r.dataHora_devolucao.toDay()))->isEmpty()
	post valores: requerente = c and reservador = a and g = grupo_carro and dataHora_reserva = data1 and dataHora_devolucao = data2
	post valorPadrao: g.isUndefined() and g = grupo_carro.grupo('A')

constraints
	inv atrasoNaoGarantido: cartao.isUndefined() implies (dataHora_reserva.agora.toMinute() - dataHora_reserva.toMinute()) < 90

	inv atrasoGarantido: not(cartao.isUndefined()) and (dataHora_reserva.agora.toDay() <= dataHora_reserva.toDay())
end



associationclass locacao between
  cliente[1] role motorista
  carro[1]
attributes
	valor : Integer
	contrato_locacao : contrato
	formulario_locacao : formulario
	dataHora_locacao : dataHora
	dataHora_devolucao : dataHora
	observacoes : String

operations

	imediato(data1 : dataHora , data2 : dataHora, grupo: grupo_carro , a : agencia) : reserva
		pre diaDevolucao: data2.toDay() < carro.manutencao.data.toDay() and data2.toDay() < motorista.reserva.dataHora_reserva.toDay()
		post menorKm: carro = a.carro->select(c | a.carro->select(d | d <> c and d.quilometragem < c.quilometragem)->isEmpty())->asSequence()->first()

	entregaCarro(c : cliente , s : Set(cliente) , data1 : dataHora , data2 : dataHora) : locacao
		pre possuidorCC: reserva.cartao.possuidor = c.nome and contrato_locacao.assinante = c.nome
		pre outrosAutorizados: formulario_locacao.assinante = s->collect(nome)->asSequence()->first()
		pre outraLocacao: locacao.allInstances()->select(l : locacao | (l.dataHora_locacao.toDay() > data1.toDay() and l.dataHora_locacao.toDay() < data2.toDay()) or (l.dataHora_devolucao.toDay() > data1.toDay() and l.dataHora_devolucao.toDay() < data2.toDay()) and (data1.toDay() > l.dataHora_locacao.toDay() and data1.toDay() < l.dataHora_devolucao.toDay()) or (data2.toDay() > l.dataHora_locacao.toDay() and data2.toDay() < l.dataHora_devolucao.toDay()))->isEmpty()
		pre reservaCredito: reserva.cartao.disponibilidade > valor and reserva.cartao = garantia.cartao
		pre condicaoCliente: c.condicao <> 'Alcoolizado' and c.condicao <> 'Drogado'
		pre clienteApto: c.apto = true
		pre carroPreparado: carro.preparado = true
		pre carroVerificado: carro.verificado = true
constraints

	inv idadeMotorista: motorista.idade > 25 and motorista.carteira.emissao.toDay() - self.dataHora_locacao.toDay() > 365
	inv carroBom: self.carro.condicao = 'normal'

end

association devolveEm between
	locacao[0..*]
	agencia[1]
end

association garante between
	reserva[1..*]
	CC[0..1] role cartao
end

class contrato
attributes
	assinante : String
end

class formulario
attributes
	assinante : String
end

class garantia
end

class CC
attributes
	possuidor : String
	disponibilidade: Real
	numero : String
	validade : dataHora
	emissao : dataHora
operations
	fazerReserva(valor : Real)
	notificar(valorCobranca : Real) : Boolean = valorCobranca <= disponibilidade
end


associationclass manutencao between
  carro[1]
  estacao_de_servico[1]
attributes
  data : dataHora
end

associationclass devolucao between
	cliente[1..*] role devolutor
	agencia[1] role receptor
attributes
	data : dataHora
operations
	taxaRetorno(valor : Real)
		pre: self.receptor <> self.locacao.agencia 
		post: self.locacao.pagamento.valor = self.locacao.pagamento.valor@pre + valor
	desgaste() : Boolean = self.locacao.carro.condicao <> 'normal'
	responsabilidade(valor : Real) : Boolean = self.locacao.reserva.cartao.notificar(valor)
		pre: self.desgaste()
	antecipada(novoValor : Real)
		pre: self.locacao.dataHora_devolucao.toDay() > self.data.toDay()
		post: self.locacao.pagamento.valor = novoValor
	atrasoPequeno(valorHora : Real, valorDia : Real)
		pre: self.data.agora.toHour() > self.locacao.dataHora_devolucao.toHour()
		post: if self.data.agora.toHour() - self.locacao.dataHora_devolucao.toHour() < 6
			then self.locacao.pagamento.valor = self.locacao.pagamento.valor@pre + valorHora * (self.data.agora.toHour() - self.locacao.dataHora_devolucao.toHour())
			else self.locacao.pagamento.valor = self.locacao.pagamento.valor@pre + valorDia
			endif
	extender(novoPrazo : dataHora)
		pre: self.carro.manutencao.data.toDay() > novoPrazo.toDay()
		post: self.locacao.dataHora_devolucao = novoPrazo
	contactarCliente() : Boolean = self.data.agora.toDay() - self.locacao.dataHora_devolucao.toDay() >= 1
	atrasoGrande() : Boolean = (self.data.agora.toDay() - self.locacao.dataHora_devolucao.toDay()) >= 3
constraints
	inv Pagamentos: self.receptor.pagamento->reject(p | p.valor > 0 and p.imposto.valor > 0)->isEmpty()
end

composition grupo_modelo between
  grupo_carro[1]
  modelo[1..*]
end

composition modelo_carro between
  modelo[1]
  carro[1..*]
end

association gerencia between
  gerente[1]
  agencia[1]
end

association termina between
	devolucao[1]
	locacao[1]
end

association impoe between
	pais[1..*]
	regra[1..*]
end

association realiza between
	reserva[1]
	locacao[1]
end

association especifica between
	apolice_seguro[0..*]
	regra[0..*]
end

association cobra between
	locacao[1]
	pagamento[1]
end

association segura between
	garantia[1..*]
	CC[1] role cartao
end

association reservaCredito between
	garantia[1]
	locacao[1]
end

association obedece between
	carro[0..*]
	regra[0..*]
end

association trabalha between
  agencia[1]
  agente_de_locacao[1..*]
end

association possui between
  agencia[1]
  carro[0..*]
end

association contem between
  registro[0..1]
  cliente[1]
end

association faz between
  cliente[1]
  pagamento[0..1]
end

association recebe between
	agencia[1]
	pagamento[0..*]
end

association devolvido between
  carro[1]
  devolucao[1]
end

association tem between
	cliente[1] role motorista
	carteira_habilitacao[1] role carteira
end

association seguro between
	cliente[1] role segurado
	apolice_seguro[0..*] role seguro
end

association localiza between
  agencia[1]
  pais[1]
end

association recolhe between
  imposto[1]
  pagamento[1]
end

association visita between
  cliente[0..*]
  pais[1..*]
end

association pede between
	reserva[1..*]
	grupo_carro[1]
end

