--aggregation
--association
--composition
--associationclass

model VoceAluga

--CLasses

class agencia
attributes
  localizacao : String
end

class gerente
end

class agente_de_locacao
end

class grupo_carro
attributes
	categoria : String
operations
	grupo(nome : String) : grupo_carro = grupo_carro.allInstances()->select(g:grupo_carro | nome = g.categoria)->asSequence()->first()
	
constraints
	inv mesmoNome : grupo_carro.allInstances()->select(g: grupo_carro | g.categoria = categoria and g <> self)->isEmpty() 
end

class modelo
attributes
  marca : String
  especificacoes : String
end

class carro
attributes
	placa : String
	ano : String
	quilometragem : Real
	preparado : Boolean
	verificado : Boolean
end

class cliente
attributes
	nome : String
	cpf : String
	endereco : String
	idade : Integer
	cartao : CC
	condicao : String
	apto : Boolean
constraints
	inv HabilitacaoValida: self.carteira.validade > self.locacao.data_devolucao
	inv SeguroCompativel: self.pais.regra->includesAll(self.seguro.regra)
	inv CarroAmbiental: self.pais.regra->includesAll(self.carro.regra)
end

class regra
end

class apolice_seguro
end

class carteira_habilitacao
attributes
	data_emissao : Integer
	validade : Integer
end

class imposto
attributes
	valor : Real
end

class pais
attributes
  nome : String
end

class estacao_de_servico
end

class registro
attributes
	problemas_pagamento : String
	acidentes : String
	danos : String
operations
	listaNegra() : Boolean = 
		not(problemas_pagamento.isUndefined() and acidentes.isUndefined() and danos.isUndefined)
end

class pagamento
attributes
  forma : String
  valor : Real
  recebido : Boolean
  vencimento : String
end

--Relacoes

associationclass reserva between
	cliente[1] role requerente
	agencia[1] role reservador
attributes
	data_reserva : Integer
	data_devolucao : Integer
operations
	criarReserva(c : cliente, a : agencia, g : grupo_carro, data1 : Integer, data2 : Integer) : reserva
end



associationclass locacao between
  cliente[1] role motorista
  carro[1]
attributes
	valor : Integer
	contrato_locacao : contrato
	formulario_locacao : formulario
	data_locacao : Integer
	data_devolucao : Integer
	observacoes : String

operations

	imediato(data1 : Integer , data2 : Integer, grupo: grupo_carro , a : agencia) : reserva
	entregaCarro(c : cliente , s : Set(cliente) , data1 : Integer , data2 : Integer) : locacao
constraints

	inv	idadeMotorista : motorista.idade > 25 and motorista.carteira.data_emissao - self.data_locacao > 365

end

association garante between
	locacao[1]
	CC[1] role cartao
end

class contrato
attributes
	assinante : String
end

class formulario
attributes
	assinante : String
end

class CC
attributes
	possuidor : String
	disponibilidade: Integer
	numero : Integer
	validade : Integer
	emissao : Integer
operations
	fazerReserva(valor : Integer)
end


associationclass manutencao between
  carro[1]
  estacao_de_servico[1]
attributes
  data : Integer
end

associationclass devolucao between
	cliente[1..*] role devolutor
	agencia[1] role receptor
attributes
	data : String
constraints
	inv Pagamentos: self.receptor.pagamento->reject(p | p.valor > 0 and p.imposto.valor > 0)->isEmpty()
end

composition grupo_modelo between
  grupo_carro[1]
  modelo[1..*]
end

composition modelo_carro between
  modelo[1]
  carro[1..*]
end

association gerencia between
  gerente[1]
  agencia[1]
end

association impoe between
	pais[1..*]
	regra[1..*]
end

association especifica between
	apolice_seguro[0..*]
	regra[0..*]
end

association obedece between
	carro[0..*]
	regra[0..*]
end

association trabalha between
  agencia[1]
  agente_de_locacao[1..*]
end

association possui between
  agencia[1]
  carro[0..*]
end

association contem between
  registro[1]
  cliente[1]
end

association faz between
  cliente[1]
  pagamento[0..1]
end

association recebe between
	agencia[1]
	pagamento[0..*]
end

association devolvido between
  carro[1]
  devolucao[1]
end

association tem between
	cliente[1] role motorista
	carteira_habilitacao[1] role carteira
end

association seguro between
	cliente[1] role segurado
	apolice_seguro[0..*] role seguro
end

association localiza between
  agencia[1]
  pais[1]
end

association recolhe between
  imposto[1]
  pagamento[1]
end

association visita between
  cliente[0..*]
  pais[1..*]
end

association pede between
	reserva[1..*]
	grupo_carro[1]
end

constraints

context reserva::criarReserva(c : cliente, a : agencia, g : grupo_carro, data1 : Integer, data2 : Integer) : reserva
	pre capacidade: a.reserva->size() <= a.carro->size()
	pre clienteLimpo: not(c.registro.listaNegra())
	pre dataSobreposta: reserva.allInstances()->select(r : reserva | (r.data_reserva > data1 and r.data_reserva < data2) or (r.data_devolucao > data1 and r.data_devolucao < data2) and (data1 > r.data_reserva and data1 < r.data_devolucao) or (data2 > r.data_reserva and data2 < r.data_devolucao))->isEmpty()
	post valores: requerente = c and reservador = a and g = grupo_carro and data_reserva = data1 and data_devolucao = data2
	post valorPadrao: g.isUndefined() and g = grupo_carro.grupo('A')


context locacao::imediato(data1 : Integer , data2 : Integer, grupo: grupo_carro , a : agencia) : reserva
	pre diaDevolucao: data2 < carro.manutencao.data and data2 < motorista.reserva.data_reserva
	post menorKm: carro = a.carro->select(c | a.carro->select(d | d <> c and d.quilometragem < c.quilometragem)->isEmpty())->asSequence()->first()
context locacao::entregaCarro(c : cliente , s : Set(cliente) , data1 : Integer , data2 : Integer) : locacao
	pre possuidorCC: cartao.possuidor = c.nome and contrato_locacao.assinante = c.nome
	pre outrosAutorizados: formulario_locacao.assinante = s->collect(nome)->asSequence()->first()
	pre outraLocacao: locacao.allInstances()->select(l : locacao | (l.data_locacao > data1 and l.data_locacao < data2) or (l.data_devolucao > data1 and l.data_devolucao < data2) and (data1 > l.data_locacao and data1 < l.data_devolucao) or (data2 > l.data_locacao and data2 < l.data_devolucao))->isEmpty()
	pre reservaCredito: cartao.disponibilidade > valor and cartao.disponibilidade = cartao.disponibilidade - valor
	pre condicaoCliente: c.condicao <> 'Alcoolizado' and c.condicao <> 'Drogado'
	pre clienteApto: c.apto = true
	pre carroPreparado: carro.preparado = true
	pre carroVerificado: carro.verificado = true